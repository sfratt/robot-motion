/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ca.concordia.encs.robot_motion;

import java.util.Arrays;
import java.util.Scanner;
import java.util.Vector;
import java.io.IOException;

public class App {

    protected static Boolean[][] gameBoard;
    protected static int boardSize;
    protected static Boolean penPosition;
    protected static int robotPositionX;
    protected static int robotPositionY;
    protected static String robotDirection;
    protected static Vector<String> positionHistory;

    public static void main(String[] args) throws IOException {
        // TODO: Create robot motion class to orchestrate program (static class?)
        // RobotMotion robotMotion = new RobotMotion();
        // robotMotion.Run();

        while (true) {

            String firstInput;
            String secondInput;
            String instruction = "nothing";
            int instructionNumber = 0;

            System.out.print("Enter command: ");
            Scanner scan = new Scanner(System.in);
            firstInput = scan.next(); // reads input

            if (validInstruction(firstInput.toUpperCase())) { // validates input
                instruction = firstInput.toUpperCase(); // input to uppercase and save
                if (instruction.equals("I") || instruction.equals("M")) {
                    secondInput = scan.next(); // read number
                    if (isInt(secondInput)) { // validates number
                        if (instruction.equals("I")) {
                            if (Integer.parseInt(secondInput) > 0) {
                                instructionNumber = Integer.parseInt(secondInput);
                            } else {
                                System.out.println("Please enter positive integer.");
                            }
                        } else {
                            instructionNumber = Integer.parseInt(secondInput);
                        }
                    } else {
                        System.out.println("Please enter valid integer.");
                    }
                }
            } else {
                System.out.println("Please enter valid instruction.");
            }

            switch (instruction) {
                case "U":
                    setPenPosition(false);
                    break;
                case "D":
                    setPenPosition(true);
                    break;
                case "R":
                    setRobotTurn("Right");
                    break;
                case "L":
                    setRobotTurn("Left");
                    break;
                case "M":
                    if (robotDirection.equals("North")) {
                        setPositionY(instructionNumber);
                    } else if (robotDirection.equals("South")) {
                        setPositionY(-instructionNumber);
                    } else if (robotDirection.equals("East")) {
                        setPositionX(instructionNumber);
                    } else {
                        setPositionX(-instructionNumber);
                    }
                    break;
                case "P":
                    printBoard();
                    break;
                case "C":
                    printCurrentPosition();
                    break;
                case "Q":
                    break;
                case "I":
                    initGame(instructionNumber);
                    break;
            }

            // System.out.println(instruction);
            // System.out.println(instructionNumber);

            if (instruction.equals("Q")) {
                scan.close();
                break;
            }
        }

    }

    public static void initGame(int size) {

        gameBoard = new Boolean[size][size];

        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                gameBoard[row][col] = false;
            }
        }

        boardSize = size;
        penPosition = false;
        robotPositionX = 0;
        robotPositionY = 0;
        robotDirection = "North";
        positionHistory = new Vector<>();

    }

    public static void printCurrentPosition() {

        String penPos;

        if (penPosition) {
            penPos = "down";
        } else {
            penPos = "up";
        }

        System.out.println("Position: " + robotPositionX + ", " + robotPositionY +
                " - Pen: " + penPos +
                " - Facing: " + robotDirection);

    }

    public static void printBoard() {

        // System.out.println(Arrays.deepToString(gameBoard));

        for (int row = boardSize - 1; row >= 0; row--) {
            System.out.print(row);
            for (int col = 0; col < boardSize; col++) {
                if (gameBoard[row][col]) {
                    System.out.print(" *");
                } else {
                    System.out.print("  ");
                }
            }
            System.out.print("\n");
        }
        System.out.print(" ");
        for (int i = 0; i < boardSize; i++) {
            System.out.print(" " + i);
        }
        System.out.print("\n");

    }

    public static void setPenPosition(Boolean position) {

        penPosition = position;// false = pen up, true = pen down

    }

    public static void setRobotTurn(String turn) {

        switch (turn) {
            case "Right":
                if (robotDirection.equals("North")) {
                    robotDirection = "East";
                } else if (robotDirection.equals("East")) {
                    robotDirection = "South";
                } else if (robotDirection.equals("South")) {
                    robotDirection = "West";
                } else if (robotDirection.equals("West")) {
                    robotDirection = "North";
                } else {
                    System.out.println("Error at setRobotTurnRight!");
                }
                break;
            case "Left":
                if (robotDirection.equals("North")) {
                    robotDirection = "West";
                } else if (robotDirection.equals("East")) {
                    robotDirection = "North";
                } else if (robotDirection.equals("South")) {
                    robotDirection = "East";
                } else if (robotDirection.equals("West")) {
                    robotDirection = "South";
                } else {
                    System.out.println("Error at setRobotTurnLeft!");
                }
                break;
        }

    }

    public static void setPositionX(int number) {
        // have to check to make sure its not out of bounds
        if (robotPositionX + number >= 0 && robotPositionX + number <= boardSize - 1) {
            if (penPosition) {
                if (number > 0) {
                    for (int i = robotPositionX; i < robotPositionX + number + 1; i++) {
                        gameBoard[robotPositionY][i] = true;
                    }
                } else {
                    for (int i = robotPositionX + number; i < robotPositionX + 1; i++) {
                        gameBoard[robotPositionY][i] = true;
                    }
                }
            }
            robotPositionX += number;
        } else {
            System.out.println("Error at setPositionX, out of bound!");
        }

    }

    public static void setPositionY(int number) {
        // have to check to make sure its not out of bounds
        if (robotPositionY + number >= 0 && robotPositionY + number <= boardSize - 1) {
            if (penPosition) {
                if (number > 0) {
                    for (int i = robotPositionY; i < robotPositionY + number + 1; i++) {
                        gameBoard[i][robotPositionX] = true;
                    }
                } else {
                    for (int i = robotPositionY + number; i < robotPositionY + 1; i++) {
                        gameBoard[i][robotPositionX] = true;
                    }
                }
            }
            robotPositionY += number;
        } else {
            System.out.println("Error at setPositionY, out of bound!");
        }

    }

    public static void printHistory() {
        // print history of positions

    }

    private static boolean validInstruction(String str) {
        if (str.equals("U")
                || str.equals("D")
                || str.equals("R")
                || str.equals("L")
                || str.equals("M")
                || str.equals("P")
                || str.equals("C")
                || str.equals("Q")
                || str.equals("I")) {
            return true;
        } else {
            return false;
        }
    }

    public static boolean isInt(String str) {
        try {
            @SuppressWarnings("unused")
            int x = Integer.parseInt(str);
            return true; // String is an Integer
        } catch (NumberFormatException e) {
            return false; // String is not an Integer
        }
    }
}
